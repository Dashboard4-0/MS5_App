[tool:pytest]
# MS5.0 Floor Dashboard - Pytest Configuration
# Starship-grade testing configuration for cosmic-scale reliability

# Test discovery patterns
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for API endpoints
    e2e: End-to-end tests for user workflows
    performance: Performance and load tests
    security: Security tests and vulnerability scans
    slow: Tests that take longer than 30 seconds
    fast: Tests that complete in under 5 seconds
    critical: Critical path tests that must pass
    regression: Regression tests for bug fixes
    smoke: Smoke tests for basic functionality

# Async test configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Test output configuration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --show-capture=no
    --durations=10
    --maxfail=5
    --color=yes
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=test-results.xml
    --junit-prefix=ms50

# Coverage configuration
[coverage:run]
source = backend/app
omit = 
    */migrations/*
    */venv/*
    */__pycache__/*
    */tests/*
    */node_modules/*
    */coverage/*
    */build/*
    */dist/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = MS5.0 Floor Dashboard Coverage Report

# Performance test configuration
[performance]
# Load test configurations
normal_load_users = 100
high_load_users = 500
peak_load_users = 1000
stress_load_users = 2000

# Performance thresholds (milliseconds)
api_response_time_threshold = 200
database_query_time_threshold = 50
websocket_latency_threshold = 100
frontend_load_time_threshold = 1000

# Error rate thresholds (percentage)
normal_load_error_threshold = 1.0
high_load_error_threshold = 5.0
peak_load_error_threshold = 10.0
stress_load_error_threshold = 50.0

# Security test configuration
[security]
bandit_severity_threshold = medium
safety_ignore_ids = 
    # Add any known false positives here
semgrep_severity_threshold = WARNING

# Test data configuration
[test_data]
# Database configuration
test_database_url = sqlite:///:memory:
test_redis_url = redis://localhost:6379/1

# Test user configurations
test_users = 
    operator:test_operator:test_password_123
    admin:test_admin:admin_password_123
    engineer:test_engineer:engineer_password_123

# Mock data configurations
mock_telemetry_interval = 1000  # milliseconds
mock_websocket_heartbeat = 5000  # milliseconds
mock_andon_escalation_timeout = 300  # seconds

# Logging configuration
[logging]
level = INFO
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
date_format = %Y-%m-%d %H:%M:%S

# Test environment variables
[env]
TESTING = true
ENVIRONMENT = test
LOG_LEVEL = DEBUG
DATABASE_URL = sqlite:///:memory:
REDIS_URL = redis://localhost:6379/1
JWT_SECRET_KEY = test-secret-key-for-testing-only
JWT_ALGORITHM = HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES = 30
