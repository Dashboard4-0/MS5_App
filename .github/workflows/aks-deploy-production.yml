name: MS5.0 AKS Production Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rolling
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
  push:
    tags: [ 'v*' ]

env:
  # Azure Container Registry Configuration
  AZURE_CONTAINER_REGISTRY: ms5acrprod.azurecr.io
  
  # AKS Cluster Configuration
  AKS_CLUSTER_NAME: ms5-aks-cluster
  AKS_RESOURCE_GROUP: ms5-rg
  
  # Deployment Configuration
  NAMESPACE: ms5-production
  TIMEOUT: 600s
  BLUE_GREEN_TIMEOUT: 1800s

jobs:
  # Pre-deployment Validation
  pre-deployment-validation:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-image-tag.outputs.tag }}
      deployment_strategy: ${{ steps.get-strategy.outputs.strategy }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get image tag
        id: get-image-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment strategy
        id: get-strategy
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "strategy=${{ github.event.inputs.deployment_strategy }}" >> $GITHUB_OUTPUT
          else
            echo "strategy=blue-green" >> $GITHUB_OUTPUT
          fi

      - name: Validate deployment
        id: validation
        run: |
          # Check if image exists in ACR
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az acr login --name ms5acrprod
          
          # Check if backend image exists
          if ! docker manifest inspect ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend:${{ steps.get-image-tag.outputs.tag }}-production > /dev/null 2>&1; then
            echo "Backend image not found in ACR"
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  # Blue-Green Deployment
  blue-green-deployment:
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && needs.pre-deployment-validation.outputs.deployment_strategy == 'blue-green'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/setup-azcli@v1
        with:
          azcliversion: '2.50.0'

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing
          kubectl version --client

      - name: Execute Blue-Green Deployment
        run: |
          # Execute blue-green deployment script
          chmod +x ./scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh \
            --backend-image="${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production" \
            --frontend-image="${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-frontend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production" \
            --namespace="${{ env.NAMESPACE }}" \
            --timeout="${{ env.BLUE_GREEN_TIMEOUT }}"

      - name: Verify Blue-Green Deployment
        run: |
          # Verify all services are running
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Run health checks
          chmod +x ./scripts/test_smoke.sh
          ./scripts/test_smoke.sh production

      - name: Notify Blue-Green Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'MS5.0 Floor Dashboard successfully deployed to production via blue-green deployment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

      - name: Notify Blue-Green Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'MS5.0 Floor Dashboard blue-green deployment to production failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

  # Canary Deployment
  canary-deployment:
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && needs.pre-deployment-validation.outputs.deployment_strategy == 'canary'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/setup-azcli@v1
        with:
          azcliversion: '2.50.0'

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing
          kubectl version --client

      - name: Execute Canary Deployment
        run: |
          # Execute canary deployment script
          chmod +x ./scripts/canary-deploy.sh
          ./scripts/canary-deploy.sh \
            --backend-image="${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production" \
            --frontend-image="${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-frontend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production" \
            --namespace="${{ env.NAMESPACE }}" \
            --canary-percentage="10" \
            --timeout="${{ env.TIMEOUT }}"

      - name: Monitor Canary Deployment
        run: |
          # Monitor canary deployment for 10 minutes
          timeout 600 ./scripts/monitor-canary.sh --namespace="${{ env.NAMESPACE }}"

      - name: Promote Canary to Full Deployment
        run: |
          # Promote canary to full deployment
          chmod +x ./scripts/promote-canary.sh
          ./scripts/promote-canary.sh --namespace="${{ env.NAMESPACE }}"

      - name: Verify Canary Deployment
        run: |
          # Verify all services are running
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Run health checks
          chmod +x ./scripts/test_smoke.sh
          ./scripts/test_smoke.sh production

      - name: Notify Canary Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'MS5.0 Floor Dashboard successfully deployed to production via canary deployment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

      - name: Notify Canary Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'MS5.0 Floor Dashboard canary deployment to production failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

  # Rolling Deployment
  rolling-deployment:
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && needs.pre-deployment-validation.outputs.deployment_strategy == 'rolling'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/setup-azcli@v1
        with:
          azcliversion: '2.50.0'

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing
          kubectl version --client

      - name: Execute Rolling Deployment
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|ms5acrprod.azurecr.io/ms5-backend:.*|ms5acrprod.azurecr.io/ms5-backend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production|g" k8s/12-backend-deployment.yaml
          sed -i "s|ms5acrprod.azurecr.io/ms5-frontend:.*|ms5acrprod.azurecr.io/ms5-frontend:${{ needs.pre-deployment-validation.outputs.image_tag }}-production|g" k8s/frontend-deployment.yaml
          
          # Apply rolling update
          kubectl apply -f k8s/12-backend-deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/frontend-deployment.yaml -n ${{ env.NAMESPACE }}
          
          # Wait for rolling update to complete
          kubectl rollout status deployment/ms5-backend -n ${{ env.NAMESPACE }} --timeout=${{ env.TIMEOUT }}
          kubectl rollout status deployment/ms5-frontend -n ${{ env.NAMESPACE }} --timeout=${{ env.TIMEOUT }}

      - name: Verify Rolling Deployment
        run: |
          # Verify all services are running
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Run health checks
          chmod +x ./scripts/test_smoke.sh
          ./scripts/test_smoke.sh production

      - name: Notify Rolling Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'MS5.0 Floor Dashboard successfully deployed to production via rolling deployment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

      - name: Notify Rolling Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'MS5.0 Floor Dashboard rolling deployment to production failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

  # Post-deployment Validation
  post-deployment-validation:
    runs-on: ubuntu-latest
    needs: [blue-green-deployment, canary-deployment, rolling-deployment]
    if: always() && (needs.blue-green-deployment.result == 'success' || needs.canary-deployment.result == 'success' || needs.rolling-deployment.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Run Production Health Checks
        run: |
          # Run comprehensive health checks
          chmod +x ./scripts/test_smoke.sh
          ./scripts/test_smoke.sh production
          
          # Run performance tests
          chmod +x ./scripts/performance-test.sh
          ./scripts/performance-test.sh production

      - name: Run Security Tests
        run: |
          # Run security tests
          chmod +x ./scripts/security-test.sh
          ./scripts/security-test.sh production

      - name: Upload Validation Results
        uses: actions/upload-artifact@v3
        with:
          name: production-validation-results
          path: validation_results/
