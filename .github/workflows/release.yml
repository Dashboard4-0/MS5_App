name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-push:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        environment: [staging, production]
        include:
          - environment: staging
            dockerfile: Dockerfile.staging
            tag_suffix: staging
          - environment: production
            dockerfile: Dockerfile.production
            tag_suffix: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest
            type=raw,value=${{ matrix.tag_suffix }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-frontend:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build staging
        run: |
          cd frontend
          npm run build:staging

      - name: Build production
        run: |
          cd frontend
          npm run build:production

      - name: Upload staging build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-staging-build-${{ github.ref_name }}
          path: frontend/build/staging/

      - name: Upload production build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-production-build-${{ github.ref_name }}
          path: frontend/build/production/

  upload-assets:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push, build-frontend]
    steps:
      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-production-build-${{ github.ref_name }}
          path: ./frontend-build

      - name: Upload frontend build to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./frontend-build
          asset_name: frontend-build-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push, build-frontend]
    steps:
      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'MS5.0 Floor Dashboard release ${{ github.ref_name }} has been created!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
