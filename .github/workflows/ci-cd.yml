name: MS5.0 Floor Dashboard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Azure Container Registry Configuration
  AZURE_CONTAINER_REGISTRY: ms5acrprod.azurecr.io
  AZURE_CONTAINER_REGISTRY_STAGING: ms5acrstaging.azurecr.io
  IMAGE_NAME: ${{ github.repository }}
  
  # AKS Cluster Configuration
  AKS_CLUSTER_NAME: ms5-aks-cluster
  AKS_CLUSTER_NAME_STAGING: ms5-aks-cluster-staging
  AKS_RESOURCE_GROUP: ms5-rg
  AKS_RESOURCE_GROUP_STAGING: ms5-rg-staging
  
  # Azure Configuration
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  
  # Build Configuration
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  BUILD_CACHE_MODE: max

jobs:
  # Azure Authentication and Setup
  azure-setup:
    runs-on: ubuntu-latest
    outputs:
      azure-credentials: ${{ steps.azure-login.outputs.azure-credentials }}
    steps:
      - name: Azure Login
        id: azure-login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up Azure CLI
        uses: azure/setup-azcli@v1
        with:
          azcliversion: '2.50.0'
      
      - name: Configure kubectl for production
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing
          kubectl version --client
      
      - name: Configure kubectl for staging
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP_STAGING }} --name ${{ env.AKS_CLUSTER_NAME_STAGING }} --overwrite-existing

  # Code Quality and Testing
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy

      - name: Code formatting check
        run: |
          cd backend
          black --check .
          isort --check-only .

      - name: Lint code
        run: |
          cd backend
          flake8 .

      - name: Type checking
        run: |
          cd backend
          mypy .

      - name: Run unit tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  # Frontend Quality and Testing
  frontend-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Backend
  build-backend:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, azure-setup]
    outputs:
      backend-image-tag: ${{ steps.meta.outputs.tags }}
      backend-image-digest: ${{ steps.build-production.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ms5acrprod
          az acr login --name ms5acrstaging

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend
            ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.run_number }}

      - name: Build and push staging image
        id: build-staging
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.staging
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-backend:${{ steps.meta.outputs.version }}-staging
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend-staging
          cache-to: type=gha,mode=${{ env.BUILD_CACHE_MODE }},scope=backend-staging
          platforms: ${{ env.BUILD_PLATFORMS }}
          provenance: false

      - name: Build and push production image
        id: build-production
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend:${{ steps.meta.outputs.version }}-production
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend-production
          cache-to: type=gha,mode=${{ env.BUILD_CACHE_MODE }},scope=backend-production
          platforms: ${{ env.BUILD_PLATFORMS }}
          provenance: false

      - name: Run Trivy vulnerability scanner (Staging)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-backend:${{ steps.meta.outputs.version }}-staging
          format: 'sarif'
          output: 'trivy-results-staging.sarif'

      - name: Run Trivy vulnerability scanner (Production)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-backend:${{ steps.meta.outputs.version }}-production
          format: 'sarif'
          output: 'trivy-results-production.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-production.sarif'

  # Build and Push Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: [frontend-checks, azure-setup]
    outputs:
      frontend-image-tag: ${{ steps.meta.outputs.tags }}
      frontend-image-digest: ${{ steps.build-production.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ms5acrprod
          az acr login --name ms5acrstaging

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-frontend
            ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.run_number }}

      - name: Build and push staging image
        id: build-staging
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.aks
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-frontend:${{ steps.meta.outputs.version }}-staging
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend-staging
          cache-to: type=gha,mode=${{ env.BUILD_CACHE_MODE }},scope=frontend-staging
          platforms: ${{ env.BUILD_PLATFORMS }}
          provenance: false

      - name: Build and push production image
        id: build-production
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.aks
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-frontend:${{ steps.meta.outputs.version }}-production
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend-production
          cache-to: type=gha,mode=${{ env.BUILD_CACHE_MODE }},scope=frontend-production
          platforms: ${{ env.BUILD_PLATFORMS }}
          provenance: false

      - name: Run Trivy vulnerability scanner (Staging)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AZURE_CONTAINER_REGISTRY_STAGING }}/ms5-frontend:${{ steps.meta.outputs.version }}-staging
          format: 'sarif'
          output: 'trivy-results-frontend-staging.sarif'

      - name: Run Trivy vulnerability scanner (Production)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}/ms5-frontend:${{ steps.meta.outputs.version }}-production
          format: 'sarif'
          output: 'trivy-results-frontend-production.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-frontend-production.sarif'

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run database migrations
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
          ./deploy_migrations.sh

      - name: Run integration tests
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379"
          pytest test_integration/ -v

  # Deploy to Staging AKS
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, build-backend, build-frontend]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl for staging
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP_STAGING }} --name ${{ env.AKS_CLUSTER_NAME_STAGING }} --overwrite-existing

      - name: Deploy to staging AKS
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|ms5acrstaging.azurecr.io/ms5-backend:.*|ms5acrstaging.azurecr.io/ms5-backend:${{ needs.build-backend.outputs.backend-image-tag }}-staging|g" k8s/12-backend-deployment.yaml
          sed -i "s|ms5acrstaging.azurecr.io/ms5-frontend:.*|ms5acrstaging.azurecr.io/ms5-frontend:${{ needs.build-frontend.outputs.frontend-image-tag }}-staging|g" k8s/frontend-deployment.yaml
          
          # Deploy to staging namespace
          kubectl apply -f k8s/ -n ms5-staging
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/ms5-backend -n ms5-staging --timeout=300s
          kubectl rollout status deployment/ms5-frontend -n ms5-staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=ms5-dashboard -n ms5-staging --timeout=300s
          
          # Run smoke tests
          ./scripts/test_smoke.sh staging

  # Deploy to Production AKS (Blue-Green)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, build-backend, build-frontend]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl for production
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Blue-Green Deployment
        run: |
          # Execute blue-green deployment script
          chmod +x ./scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh ${{ needs.build-backend.outputs.backend-image-tag }}-production ${{ needs.build-frontend.outputs.frontend-image-tag }}-production

      - name: Run smoke tests
        run: |
          # Run smoke tests on production
          ./scripts/test_smoke.sh production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'MS5.0 Floor Dashboard successfully deployed to production via blue-green deployment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'MS5.0 Floor Dashboard deployment to production failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx locust

      - name: Run performance tests
        run: |
          cd backend
          pytest test_performance/ -v

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: backend/test_results/

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx bandit safety

      - name: Run security tests
        run: |
          cd backend
          pytest test_security/ -v

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: backend/test_results/

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: frontend/test_results/

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old images
        run: |
          # Clean up old Docker images from Azure Container Registry
          echo "Cleaning up old images from ACR..."
          # This would be implemented with ACR cleanup policies