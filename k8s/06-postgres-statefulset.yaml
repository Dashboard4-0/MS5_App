---
# Phase 3.1: Enhanced PostgreSQL StatefulSet with TimescaleDB and Clustering
# This manifest implements the enhanced database infrastructure with:
# - Single PostgreSQL container with TimescaleDB extension
# - Database clustering and read replicas
# - Enhanced security and performance optimization
# - Comprehensive monitoring and health checks

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: database
    role: primary
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: managed-premium
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: database
    role: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: managed-premium
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-replica-data-pvc
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: database
    role: replica
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: managed-premium
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: database
    role: primary
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: ms5-dashboard
      component: database
      role: primary
  template:
    metadata:
      labels:
        app: ms5-dashboard
        component: database
        role: primary
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5432"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ms5-database-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ms5-dashboard
                - key: component
                  operator: In
                  values:
                  - database
              topologyKey: kubernetes.io/hostname
      containers:
      - name: postgres
        image: timescale/timescaledb:latest-pg15
        ports:
        - containerPort: 5432
          name: postgres
        - containerPort: 9187
          name: metrics
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ms5-database-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_INITDB_ARGS
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_REPLICATION_USER
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_REPLICATION_USER
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ms5-database-secrets
              key: POSTGRES_REPLICATION_PASSWORD
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-backup
          mountPath: /backup
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        - name: wal-archive
          mountPath: /wal-archive
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 1;" > /dev/null 2>&1
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 1;" > /dev/null 2>&1 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT extname FROM pg_extension WHERE extname = 'timescaledb';" | grep -q timescaledb
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: postgres-backup
        persistentVolumeClaim:
          claimName: postgres-backup-pvc
      - name: postgres-config
        configMap:
          name: ms5-database-config
      - name: init-scripts
        configMap:
          name: ms5-database-init-scripts
      - name: wal-archive
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
      storageClassName: managed-premium
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: database
    role: replica
spec:
  serviceName: postgres-replica
  replicas: 2
  selector:
    matchLabels:
      app: ms5-dashboard
      component: database
      role: replica
  template:
    metadata:
      labels:
        app: ms5-dashboard
        component: database
        role: replica
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5432"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ms5-database-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ms5-dashboard
                - key: component
                  operator: In
                  values:
                  - database
              topologyKey: kubernetes.io/hostname
      containers:
      - name: postgres-replica
        image: timescale/timescaledb:latest-pg15
        ports:
        - containerPort: 5432
          name: postgres
        - containerPort: 9187
          name: metrics
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ms5-database-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_USER
        - name: POSTGRES_REPLICATION_USER
          valueFrom:
            configMapKeyRef:
              name: ms5-database-config
              key: POSTGRES_REPLICATION_USER
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ms5-database-secrets
              key: POSTGRES_REPLICATION_PASSWORD
        - name: POSTGRES_PRIMARY_HOST
          value: "postgres-primary.ms5-production.svc.cluster.local"
        - name: POSTGRES_PRIMARY_PORT
          value: "5432"
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: replica-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 1;" > /dev/null 2>&1
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 1;" > /dev/null 2>&1 && \
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT pg_is_in_recovery();" | grep -q t
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-replica-data-pvc
      - name: postgres-config
        configMap:
          name: ms5-database-config
      - name: replica-init-scripts
        configMap:
          name: ms5-database-replica-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: managed-premium
