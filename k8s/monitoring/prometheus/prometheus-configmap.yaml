---
# MS5.0 Floor Dashboard - Enhanced Prometheus Configuration
# Production-grade configuration with Kubernetes service discovery, federation, and recording rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: ms5-dashboard
    component: prometheus
    environment: production
    version: "v2.45.0"
  annotations:
    description: "Enhanced Prometheus configuration with Kubernetes service discovery and federation"
    managed-by: "ms5-devops-team"
data:
  prometheus.yml: |
    # Global configuration
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'ms5-production'
        environment: 'production'
        region: 'uksouth'
        datacenter: 'azure'
    
    # Rule files for alerting and recording rules
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    # AlertManager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager.monitoring.svc.cluster.local:9093
          scheme: http
          timeout: 10s
          api_version: v2
    
    # Scrape configurations with enhanced Kubernetes service discovery
    scrape_configs:
      # Prometheus self-monitoring
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 30s
        metrics_path: /metrics
        honor_labels: true
      
      # Kubernetes API server monitoring
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['default', 'kube-system']
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
          - target_label: __address__
            replacement: kubernetes.default.svc.cluster.local:443
      
      # Kubernetes nodes monitoring
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
            namespaces:
              names: ['default', 'kube-system']
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc.cluster.local:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # Kubernetes pods with annotation-based discovery
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['ms5-production', 'ms5-staging', 'monitoring']
        relabel_configs:
          # Only scrape pods with prometheus.io/scrape annotation
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Use custom metrics path if specified
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # Use custom port if specified
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          # Add Kubernetes labels as Prometheus labels
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          # Add namespace and pod name labels
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: replace
            target_label: kubernetes_container_name
      
      # Kubernetes service endpoints with annotation-based discovery
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging', 'monitoring']
        relabel_configs:
          # Only scrape services with prometheus.io/scrape annotation
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Use custom scheme if specified
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          # Use custom metrics path if specified
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # Use custom port if specified
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          # Add Kubernetes labels as Prometheus labels
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          # Add namespace and service name labels
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
      
      # Kubernetes cAdvisor for container metrics
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
            namespaces:
              names: ['default', 'kube-system']
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc.cluster.local:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      # MS5.0 Backend API monitoring
      - job_name: 'ms5-backend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ms5-backend-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /metrics
        scrape_interval: 10s
        scrape_timeout: 5s
        honor_labels: true
      
      # PostgreSQL Database monitoring
      - job_name: 'postgres'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: postgres-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /metrics
        scrape_interval: 15s
        scrape_timeout: 5s
      
      # Redis Cache monitoring
      - job_name: 'redis'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: redis-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /metrics
        scrape_interval: 15s
        scrape_timeout: 5s
      
      # MinIO Object Storage monitoring
      - job_name: 'minio'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: minio-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /minio/v2/metrics/cluster
        scrape_interval: 30s
        scrape_timeout: 10s
      
      # Celery Workers monitoring
      - job_name: 'celery-workers'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ms5-celery-worker
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /metrics
        scrape_interval: 30s
        scrape_timeout: 10s
      
      # MS5.0 Application-specific metrics
      - job_name: 'ms5-production-metrics'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ms5-backend-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /api/v1/metrics/production
        scrape_interval: 30s
        scrape_timeout: 10s
      
      - job_name: 'ms5-oee-metrics'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ms5-backend-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /api/v1/metrics/oee
        scrape_interval: 60s
        scrape_timeout: 10s
      
      - job_name: 'ms5-andon-metrics'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['ms5-production', 'ms5-staging']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ms5-backend-monitoring
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        metrics_path: /api/v1/metrics/andon
        scrape_interval: 30s
        scrape_timeout: 10s
      
      # Azure Monitor integration (for infrastructure metrics)
      - job_name: 'azure-monitor'
        static_configs:
          - targets: ['azure-monitor-exporter:9090']
        scrape_interval: 60s
        scrape_timeout: 30s
        metrics_path: /metrics
        honor_labels: true
    
    # Recording rules for performance optimization
    recording_rules:
      - name: "ms5_recording_rules"
        rules:
          # API performance metrics
          - record: ms5:api_request_duration_seconds:rate5m
            expr: rate(ms5_api_request_duration_seconds_sum[5m]) / rate(ms5_api_request_duration_seconds_count[5m])
            labels:
              service: "ms5-backend"
          
          - record: ms5:api_request_rate:rate5m
            expr: rate(ms5_api_requests_total[5m])
            labels:
              service: "ms5-backend"
          
          # Production metrics
          - record: ms5:production_oee:avg1h
            expr: avg_over_time(ms5_production_oee[1h])
            labels:
              metric_type: "oee"
          
          - record: ms5:production_throughput:rate1h
            expr: rate(ms5_production_units_total[1h])
            labels:
              metric_type: "throughput"
          
          # System resource utilization
          - record: ms5:container_cpu_utilization:rate5m
            expr: rate(container_cpu_usage_seconds_total[5m]) * 100
            labels:
              metric_type: "cpu"
          
          - record: ms5:container_memory_utilization:current
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100
            labels:
              metric_type: "memory"
          
          # Database performance
          - record: ms5:database_connection_utilization:current
            expr: (pg_stat_database_numbackends / pg_settings_max_connections) * 100
            labels:
              service: "postgres"
          
          - record: ms5:database_query_performance:rate5m
            expr: rate(pg_stat_database_tup_returned[5m]) / rate(pg_stat_database_tup_fetched[5m])
            labels:
              service: "postgres"
          
          # Cache performance
          - record: ms5:redis_memory_utilization:current
            expr: (redis_memory_used_bytes / redis_memory_max_bytes) * 100
            labels:
              service: "redis"
          
          - record: ms5:redis_hit_ratio:rate5m
            expr: rate(redis_keyspace_hits_total[5m]) / (rate(redis_keyspace_hits_total[5m]) + rate(redis_keyspace_misses_total[5m]))
            labels:
              service: "redis"
          
          # Celery performance
          - record: ms5:celery_task_rate:rate5m
            expr: rate(celery_tasks_total[5m])
            labels:
              service: "celery"
          
          - record: ms5:celery_queue_length:current
            expr: celery_queue_length
            labels:
              service: "celery"
          
          # Business metrics aggregation
          - record: ms5:overall_system_health:current
            expr: (ms5:api_request_duration_seconds:rate5m < 0.5) * 1
            labels:
              metric_type: "health_score"
