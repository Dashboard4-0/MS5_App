---
# MS5.0 Floor Dashboard - Production Load Balancer Configuration
# Phase 9: Production Deployment
#
# This manifest implements a comprehensive Azure Load Balancer configuration
# with high availability, SSL termination, and advanced routing capabilities.
#
# Features:
# - SSL/TLS termination with Let's Encrypt certificates
# - Health checks and failover
# - Rate limiting and DDoS protection
# - Geographic load balancing
# - Advanced routing rules

# Azure Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: ms5-production-loadbalancer
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: loadbalancer
    environment: production
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "production-subnet"
    service.beta.kubernetes.io/azure-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/health"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-interval: "15"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-num-of-probe: "3"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-timeout: "5"
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "ms5-production-rg"
    service.beta.kubernetes.io/azure-dns-label-name: "ms5-dashboard"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
    - "0.0.0.0/0"  # Allow all traffic (restrict in production)
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: prometheus
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: flower
    port: 5555
    targetPort: 5555
    protocol: TCP
  selector:
    app: ms5-dashboard
    component: nginx
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

---
# NGINX Ingress Controller Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-config
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: ingress
data:
  # Global NGINX configuration
  nginx.conf: |
    # Global NGINX Configuration for MS5.0 Dashboard
    # Optimized for production workloads
    
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    # Worker configuration
    worker_rlimit_nofile 65535;
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        # Basic settings
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;
        client_body_buffer_size 128k;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 4k;
        output_buffers 1 32k;
        postpone_output 1460;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
        limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;
        
        # Connection limiting
        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
        limit_conn conn_limit_per_ip 20;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Content Security Policy
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-ancestors 'none';" always;
        
        # Hide NGINX version
        server_tokens off;
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # OCSP stapling
        ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Upstream servers
        upstream ms5_backend {
            least_conn;
            server ms5-backend.ms5-production.svc.cluster.local:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream ms5_grafana {
            least_conn;
            server ms5-grafana.ms5-production.svc.cluster.local:3000 max_fails=3 fail_timeout=30s;
            keepalive 16;
        }
        
        upstream ms5_prometheus {
            least_conn;
            server ms5-prometheus.ms5-production.svc.cluster.local:9090 max_fails=3 fail_timeout=30s;
            keepalive 16;
        }
        
        upstream ms5_flower {
            least_conn;
            server ms5-flower.ms5-production.svc.cluster.local:5555 max_fails=3 fail_timeout=30s;
            keepalive 8;
        }
        
        # Main application server
        server {
            listen 80;
            listen 443 ssl http2;
            server_name ms5-dashboard.company.com api.ms5-dashboard.company.com;
            
            # SSL certificates
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API endpoints
            location /api/ {
                limit_req zone=api burst=10 nodelay;
                
                proxy_pass http://ms5_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                
                # Buffering
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
            }
            
            # WebSocket endpoints
            location /ws/ {
                proxy_pass http://ms5_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # WebSocket timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 86400s;
                proxy_read_timeout 86400s;
            }
            
            # Static files
            location /static/ {
                alias /var/www/static/;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options "nosniff";
            }
            
            # Media files
            location /media/ {
                alias /var/www/media/;
                expires 30d;
                add_header Cache-Control "public";
                add_header X-Content-Type-Options "nosniff";
            }
            
            # Default location
            location / {
                proxy_pass http://ms5_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
        
        # Grafana server
        server {
            listen 80;
            listen 443 ssl http2;
            server_name grafana.ms5-dashboard.company.com;
            
            # SSL certificates
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            
            location / {
                proxy_pass http://ms5_grafana;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
        
        # Prometheus server
        server {
            listen 80;
            listen 443 ssl http2;
            server_name prometheus.ms5-dashboard.company.com;
            
            # SSL certificates
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            
            # Basic auth for Prometheus
            auth_basic "Prometheus";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            location / {
                proxy_pass http://ms5_prometheus;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
        
        # Flower server
        server {
            listen 80;
            listen 443 ssl http2;
            server_name flower.ms5-dashboard.company.com;
            
            # SSL certificates
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            
            location / {
                proxy_pass http://ms5_flower;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
        
        # Default server (catch-all)
        server {
            listen 80 default_server;
            listen 443 ssl http2 default_server;
            server_name _;
            
            # SSL certificates
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            
            # Return 444 for unknown hosts
            return 444;
        }
    }

---
# NGINX Ingress Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: ingress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ms5-dashboard
      component: ingress
  template:
    metadata:
      labels:
        app: ms5-dashboard
        component: ingress
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      securityContext:
        runAsUser: 101
        runAsNonRoot: true
        fsGroup: 101
      containers:
      - name: nginx-ingress-controller
        image: k8s.gcr.io/ingress-nginx/controller:v1.8.1
        args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-ingress-config
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --publish-service=$(POD_NAMESPACE)/ms5-production-loadbalancer
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --enable-ssl-passthrough
          - --enable-ssl-chain-completion
          - --enable-ssl-dynamic-reload
          - --enable-ssl-passthrough
          - --enable-ssl-chain-completion
          - --enable-ssl-dynamic-reload
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: metrics
          containerPort: 10254
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            cpu: "100m"
            memory: "90Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-private
          mountPath: /etc/ssl/private
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          runAsUser: 101
          readOnlyRootFilesystem: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-ingress-config
      - name: ssl-certs
        secret:
          secretName: ms5-tls-secret
          items:
          - key: tls.crt
            path: tls.crt
      - name: ssl-private
        secret:
          secretName: ms5-tls-secret
          items:
          - key: tls.key
            path: tls.key
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ms5-dashboard
                - key: component
                  operator: In
                  values:
                  - ingress
              topologyKey: kubernetes.io/hostname

---
# NGINX Ingress Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: ingress

---
# NGINX Ingress ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app: ms5-dashboard
    component: ingress
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get

---
# NGINX Ingress ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  labels:
    app: ms5-dashboard
    component: ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: ms5-production

---
# NGINX Ingress Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: ingress
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get

---
# NGINX Ingress RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ms5-production
  labels:
    app: ms5-dashboard
    component: ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: ms5-production
