---
# NGINX Ingress Controller Deployment
# Production-grade ingress controller with enterprise features
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: "1.8.2"
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  annotations:
    description: "NGINX Ingress Controller deployment for MS5.0 Floor Dashboard"
    contact: "team@ms5floor.com"
    version: "1.0.0"
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/component: controller
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: "1.8.2"
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      dnsPolicy: ClusterFirst
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - ingress-nginx
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - controller
              topologyKey: kubernetes.io/hostname
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 82
        fsGroup: 82
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: controller
        image: registry.k8s.io/ingress-nginx/controller:v1.8.2@sha256:74834d3d25b336b62cabeb8bf7f1d788706e2cf1cfd64022de4137ade8881ff2
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
        - --election-id=ingress-controller-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        - --metrics-bind-address=0.0.0.0:10254
        - --enable-ssl-passthrough
        - --default-ssl-certificate=ms5-production/ms5-tls-secret
        - --ssl-protocols=TLSv1.2 TLSv1.3
        - --ssl-ciphers=ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
        - --enable-brotli
        - --gzip-level=6
        - --worker-processes=auto
        - --worker-connections=16384
        - --max-worker-open-files=65536
        - --upstream-keepalive-connections=320
        - --upstream-keepalive-requests=10000
        - --upstream-keepalive-timeout=60s
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          runAsNonRoot: true
          runAsUser: 101
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          readOnlyRootFilesystem: true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: webhook
          containerPort: 8443
          protocol: TCP
        - name: metrics
          containerPort: 10254
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: webhook-cert
          mountPath: /usr/local/certificates/
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: webhook-cert
        secret:
          secretName: ingress-nginx-admission
      - name: tmp
        emptyDir: {}
      - name: var-cache-nginx
        emptyDir: {}
      - name: var-run
        emptyDir: {}
